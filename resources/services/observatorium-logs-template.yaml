apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: observatorium-logs
objects:
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: chunk-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
    name: observatorium-loki-chunk-cache
  spec:
    clusterIP: None
    ports:
    - name: client
      port: 11211
      targetPort: 11211
    - name: metrics
      port: 9150
      targetPort: 9150
    selector:
      app.kubernetes.io/component: chunk-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  imagePullSecrets:
  - name: quay.io
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/component: chunk-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
    name: observatorium-loki-chunk-cache
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      prometheus: app-sre
    name: observatorium-loki-chunk-cache
  spec:
    endpoints:
    - port: metrics
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        app.kubernetes.io/component: chunk-cache
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: loki
        app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: chunk-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
    name: observatorium-loki-chunk-cache
  spec:
    replicas: ${{LOKI_CHUNK_CACHE_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: chunk-cache
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: loki
        app.kubernetes.io/part-of: observatorium
    serviceName: observatorium-loki-chunk-cache
    template:
      metadata:
        labels:
          app.kubernetes.io/component: chunk-cache
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: loki
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
      spec:
        containers:
        - args:
          - -m 4096
          - -I 2m
          - -c 1024
          - -v
          image: ${MEMCACHED_IMAGE}:${MEMCACHED_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 11211
            timeoutSeconds: 5
          name: memcached
          ports:
          - containerPort: 11211
            name: client
          readinessProbe:
            initialDelaySeconds: 5
            tcpSocket:
              port: 11211
            timeoutSeconds: 1
          resources:
            limits:
              cpu: ${LOKI_CHUNK_CACHE_CPU_LIMITS}
              memory: ${LOKI_CHUNK_CACHE_MEMORY_LIMITS}
            requests:
              cpu: ${LOKI_CHUNK_CACHE_CPU_REQUESTS}
              memory: ${LOKI_CHUNK_CACHE_MEMORY_REQUESTS}
          terminationMessagePolicy: FallbackToLogsOnError
        - args:
          - --memcached.address=localhost:11211
          - --web.listen-address=0.0.0.0:9150
          image: ${MEMCACHED_EXPORTER_IMAGE}:${MEMCACHED_EXPORTER_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 9150
            timeoutSeconds: 5
          name: exporter
          ports:
          - containerPort: 9150
            name: metrics
          readinessProbe:
            initialDelaySeconds: 5
            tcpSocket:
              port: 9150
            timeoutSeconds: 1
          resources: {}
        securityContext: {}
        serviceAccountName: observatorium-loki-chunk-cache
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: index-query-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
    name: observatorium-loki-index-query-cache
  spec:
    clusterIP: None
    ports:
    - name: client
      port: 11211
      targetPort: 11211
    - name: metrics
      port: 9150
      targetPort: 9150
    selector:
      app.kubernetes.io/component: index-query-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  imagePullSecrets:
  - name: quay.io
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/component: index-query-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
    name: observatorium-loki-index-query-cache
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      prometheus: app-sre
    name: observatorium-loki-index-query-cache
  spec:
    endpoints:
    - port: metrics
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        app.kubernetes.io/component: index-query-cache
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: loki
        app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: index-query-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
    name: observatorium-loki-index-query-cache
  spec:
    replicas: ${{LOKI_INDEX_QUERY_CACHE_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: index-query-cache
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: loki
        app.kubernetes.io/part-of: observatorium
    serviceName: observatorium-loki-index-query-cache
    template:
      metadata:
        labels:
          app.kubernetes.io/component: index-query-cache
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: loki
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
      spec:
        containers:
        - args:
          - -m 1024
          - -I 5m
          - -c 1024
          - -v
          image: ${MEMCACHED_IMAGE}:${MEMCACHED_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 11211
            timeoutSeconds: 5
          name: memcached
          ports:
          - containerPort: 11211
            name: client
          readinessProbe:
            initialDelaySeconds: 5
            tcpSocket:
              port: 11211
            timeoutSeconds: 1
          resources:
            limits:
              cpu: ${LOKI_INDEX_QUERY_CACHE_CPU_LIMITS}
              memory: ${LOKI_INDEX_QUERY_CACHE_MEMORY_LIMITS}
            requests:
              cpu: ${LOKI_INDEX_QUERY_CACHE_CPU_REQUESTS}
              memory: ${LOKI_INDEX_QUERY_CACHE_MEMORY_REQUESTS}
          terminationMessagePolicy: FallbackToLogsOnError
        - args:
          - --memcached.address=localhost:11211
          - --web.listen-address=0.0.0.0:9150
          image: ${MEMCACHED_EXPORTER_IMAGE}:${MEMCACHED_EXPORTER_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 9150
            timeoutSeconds: 5
          name: exporter
          ports:
          - containerPort: 9150
            name: metrics
          readinessProbe:
            initialDelaySeconds: 5
            tcpSocket:
              port: 9150
            timeoutSeconds: 1
          resources: {}
        securityContext: {}
        serviceAccountName: observatorium-loki-index-query-cache
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: results-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
    name: observatorium-loki-results-cache
  spec:
    clusterIP: None
    ports:
    - name: client
      port: 11211
      targetPort: 11211
    - name: metrics
      port: 9150
      targetPort: 9150
    selector:
      app.kubernetes.io/component: results-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  imagePullSecrets:
  - name: quay.io
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/component: results-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
    name: observatorium-loki-results-cache
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      prometheus: app-sre
    name: observatorium-loki-results-cache
  spec:
    endpoints:
    - port: metrics
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        app.kubernetes.io/component: results-cache
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: loki
        app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: results-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
    name: observatorium-loki-results-cache
  spec:
    replicas: ${{LOKI_RESULTS_CACHE_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: results-cache
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: loki
        app.kubernetes.io/part-of: observatorium
    serviceName: observatorium-loki-results-cache
    template:
      metadata:
        labels:
          app.kubernetes.io/component: results-cache
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: loki
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
      spec:
        containers:
        - args:
          - -m 1024
          - -I 1m
          - -c 1024
          - -v
          image: ${MEMCACHED_IMAGE}:${MEMCACHED_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 11211
            timeoutSeconds: 5
          name: memcached
          ports:
          - containerPort: 11211
            name: client
          readinessProbe:
            initialDelaySeconds: 5
            tcpSocket:
              port: 11211
            timeoutSeconds: 1
          resources:
            limits:
              cpu: ${LOKI_RESULTS_CACHE_CPU_LIMITS}
              memory: ${LOKI_RESULTS_CACHE_MEMORY_LIMITS}
            requests:
              cpu: ${LOKI_RESULTS_CACHE_CPU_REQUESTS}
              memory: ${LOKI_RESULTS_CACHE_MEMORY_REQUESTS}
          terminationMessagePolicy: FallbackToLogsOnError
        - args:
          - --memcached.address=localhost:11211
          - --web.listen-address=0.0.0.0:9150
          image: ${MEMCACHED_EXPORTER_IMAGE}:${MEMCACHED_EXPORTER_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 9150
            timeoutSeconds: 5
          name: exporter
          ports:
          - containerPort: 9150
            name: metrics
          readinessProbe:
            initialDelaySeconds: 5
            tcpSocket:
              port: 9150
            timeoutSeconds: 1
          resources: {}
        securityContext: {}
        serviceAccountName: observatorium-loki-results-cache
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: compactor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${LOKI_IMAGE_TAG}
    name: observatorium-loki-compactor-grpc
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 9095
      targetPort: 9095
    selector:
      app.kubernetes.io/component: compactor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: compactor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${LOKI_IMAGE_TAG}
    name: observatorium-loki-compactor-http
  spec:
    ports:
    - name: metrics
      port: 3100
      targetPort: 3100
    selector:
      app.kubernetes.io/component: compactor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      prometheus: app-sre
    name: observatorium-loki-compactor
  spec:
    endpoints:
    - port: metrics
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        app.kubernetes.io/component: compactor
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: loki
        app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: compactor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${LOKI_IMAGE_TAG}
    name: observatorium-loki-compactor
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: compactor
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: loki
        app.kubernetes.io/part-of: observatorium
    serviceName: observatorium-loki-compactor-grpc
    template:
      metadata:
        labels:
          app.kubernetes.io/component: compactor
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: loki
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
      spec:
        containers:
        - args:
          - -target=compactor
          - -config.file=/etc/loki/config/config.yaml
          - -limits.per-user-override-config=/etc/loki/config/overrides.yaml
          - -log.level=error
          - -s3.buckets=$(S3_BUCKETS)
          - -s3.region=$(S3_REGION)
          - -s3.access-key-id=$(AWS_ACCESS_KEY_ID)
          - -s3.secret-access-key=$(AWS_SECRET_ACCESS_KEY)
          - -distributor.replication-factor=${LOKI_REPLICATION_FACTOR}
          env:
          - name: S3_BUCKETS
            valueFrom:
              secretKeyRef:
                key: bucket
                name: ${LOKI_S3_SECRET}
          - name: S3_REGION
            valueFrom:
              secretKeyRef:
                key: aws_region
                name: ${LOKI_S3_SECRET}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${LOKI_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${LOKI_S3_SECRET}
          image: ${LOKI_IMAGE}:${LOKI_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /metrics
              port: 3100
              scheme: HTTP
            periodSeconds: 30
          name: observatorium-loki-compactor
          ports:
          - containerPort: 3100
            name: metrics
          - containerPort: 9095
            name: grpc
          readinessProbe:
            httpGet:
              path: /ready
              port: 3100
              scheme: HTTP
            initialDelaySeconds: 15
            timeoutSeconds: 1
          resources:
            limits:
              cpu: ${LOKI_COMPACTOR_CPU_LIMITS}
              memory: ${LOKI_COMPACTOR_MEMORY_LIMITS}
            requests:
              cpu: ${LOKI_COMPACTOR_CPU_REQUESTS}
              memory: ${LOKI_COMPACTOR_MEMORY_REQUESTS}
          volumeMounts:
          - mountPath: /etc/loki/config/
            name: config
            readOnly: false
          - mountPath: /data
            name: storage
            readOnly: false
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.${JAEGER_COLLECTOR_NAMESPACE}.svc:14250
          - --reporter.type=grpc
          - --agent.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 5778
            name: configs
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 14271
            name: metrics
          readinessProbe:
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
            initialDelaySeconds: 1
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
        serviceAccountName: ${SERVICE_ACCOUNT_NAME}
        volumes:
        - configMap:
            name: observatorium-loki
          name: config
    volumeClaimTemplates:
    - metadata:
        labels:
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: loki
          app.kubernetes.io/part-of: observatorium
        name: storage
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${LOKI_PVC_REQUEST}
        storageClassName: ${STORAGE_CLASS}
- apiVersion: v1
  data:
    config.yaml: |-
      "analytics":
        "reporting_enabled": false
      "auth_enabled": true
      "chunk_store_config":
        "chunk_cache_config":
          "memcached":
            "batch_size": 100
            "parallelism": 100
          "memcached_client":
            "addresses": "dns+observatorium-loki-chunk-cache.${NAMESPACE}.svc.cluster.local:11211"
            "consistent_hash": true
            "max_idle_conns": 100
            "timeout": "100ms"
            "update_interval": "1m"
        "max_look_back_period": "0s"
      "common":
        "compactor_grpc_address": "observatorium-loki-compactor-grpc.${NAMESPACE}.svc.cluster.local:9095"
      "compactor":
        "compaction_interval": "2h"
        "shared_store": "s3"
        "working_directory": "/data/loki/compactor"
      "distributor":
        "ring":
          "kvstore":
            "store": "memberlist"
      "frontend":
        "compress_responses": true
        "scheduler_address": "observatorium-loki-query-scheduler-grpc.${NAMESPACE}.svc.cluster.local:9095"
        "tail_proxy_url": "observatorium-loki-querier-http.${NAMESPACE}.svc.cluster.local:3100"
      "frontend_worker":
        "grpc_client_config":
          "max_send_msg_size": 104857600
        "match_max_concurrent": true
        "scheduler_address": "observatorium-loki-query-scheduler-grpc.${NAMESPACE}.svc.cluster.local:9095"
      "ingester":
        "chunk_block_size": 262144
        "chunk_encoding": "snappy"
        "chunk_idle_period": "1h"
        "chunk_retain_period": "5m"
        "chunk_target_size": 2097152
        "lifecycler":
          "heartbeat_period": "5s"
          "interface_names":
          - "eth0"
          "join_after": "60s"
          "num_tokens": 512
          "ring":
            "heartbeat_timeout": "1m"
            "kvstore":
              "store": "memberlist"
        "max_transfer_retries": 0
        "wal":
          "dir": "/data/loki/wal"
          "enabled": true
          "replay_memory_ceiling": "4GB"
      "ingester_client":
        "grpc_client_config":
          "max_recv_msg_size": 67108864
        "remote_timeout": "1s"
      "limits_config":
        "cardinality_limit": 100000
        "creation_grace_period": "10m"
        "deletion_mode": "disabled"
        "enforce_metric_name": false
        "ingestion_burst_size_mb": 20
        "ingestion_rate_mb": 50
        "ingestion_rate_strategy": "global"
        "max_cache_freshness_per_query": "10m"
        "max_chunks_per_query": 2000000
        "max_entries_limit_per_query": 5000
        "max_global_streams_per_user": 25000
        "max_label_name_length": 1024
        "max_label_names_per_series": 30
        "max_label_value_length": 2048
        "max_line_size": 256000
        "max_query_length": "721h"
        "max_query_parallelism": 16
        "max_query_series": 500
        "max_streams_per_user": 0
        "per_stream_rate_limit": "5MB"
        "per_stream_rate_limit_burst": "15MB"
        "reject_old_samples": true
        "reject_old_samples_max_age": "24h"
        "split_queries_by_interval": "30m"
      "memberlist":
        "abort_if_cluster_join_fails": false
        "bind_port": 7946
        "join_members":
        - "observatorium-loki-gossip-ring.${NAMESPACE}.svc.cluster.local:7946"
        "max_join_backoff": "1m"
        "max_join_retries": 10
        "min_join_backoff": "1s"
      "querier":
        "engine":
          "max_look_back_period": "30s"
        "extra_query_delay": "0s"
        "max_concurrent": 2
        "query_ingesters_within": "3h"
        "query_timeout": "6m"
        "tail_max_duration": "1h"
      "query_range":
        "align_queries_with_step": true
        "cache_results": true
        "max_retries": 5
        "parallelise_shardable_queries": false
        "results_cache":
          "cache":
            "memcached_client":
              "addresses": "dns+observatorium-loki-results-cache.${NAMESPACE}.svc.cluster.local:11211"
              "consistent_hash": true
              "max_idle_conns": 16
              "timeout": "500ms"
              "update_interval": "1m"
      "query_scheduler":
        "max_outstanding_requests_per_tenant": 256
      "ruler":
        "alertmanager_refresh_interval": "1m"
        "alertmanager_url": "http://_http._tcp.observatorium-alertmanager.${ALERTMANAGER_NAMESPACE}.svc.cluster.local"
        "enable_alertmanager_discovery": true
        "enable_alertmanager_v2": false
        "enable_api": true
        "enable_sharding": true
        "ring":
          "kvstore":
            "store": "memberlist"
        "rule_path": "/data"
        "storage":
          "type": "s3"
        "wal":
          "dir": "/data/loki/wal"
          "max_age": "4h"
          "min_age": "5m"
          "truncate_frequency": "60m"
      "schema_config":
        "configs":
        - "from": "2020-10-01"
          "index":
            "period": "24h"
            "prefix": "loki_index_"
          "object_store": "s3"
          "schema": "v11"
          "store": "boltdb-shipper"
      "server":
        "graceful_shutdown_timeout": "5s"
        "grpc_server_max_concurrent_streams": 1000
        "grpc_server_max_recv_msg_size": 104857600
        "grpc_server_max_send_msg_size": 104857600
        "grpc_server_min_time_between_pings": "10s"
        "grpc_server_ping_without_stream_allowed": true
        "http_listen_port": 3100
        "http_server_idle_timeout": "120s"
        "http_server_write_timeout": "1m"
        "log_level": "error"
      "storage_config":
        "boltdb_shipper":
          "active_index_directory": "/data/loki/index"
          "cache_location": "/data/loki/index_cache"
          "cache_ttl": "24h"
          "index_gateway_client":
            "server_address": "observatorium-loki-index-gateway-grpc.${NAMESPACE}.svc.cluster.local:9095"
          "resync_interval": "5m"
          "shared_store": "s3"
        "index_queries_cache_config":
          "memcached":
            "batch_size": 100
            "parallelism": 100
          "memcached_client":
            "addresses": "dns+observatorium-loki-index-query-cache.${NAMESPACE}.svc.cluster.local:11211"
            "consistent_hash": true
      "tracing":
        "enabled": true
    overrides.yaml: '{}'
  kind: ConfigMap
  metadata:
    annotations:
      qontract.recycle: "true"
    labels:
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${LOKI_IMAGE_TAG}
    name: observatorium-loki
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/component: distributor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${LOKI_IMAGE_TAG}
    name: observatorium-loki-distributor
  spec:
    replicas: ${{LOKI_DISTRIBUTOR_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: distributor
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: loki
        app.kubernetes.io/part-of: observatorium
        loki.grafana.com/gossip: "true"
    template:
      metadata:
        labels:
          app.kubernetes.io/component: distributor
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: loki
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
          loki.grafana.com/gossip: "true"
      spec:
        containers:
        - args:
          - -target=distributor
          - -config.file=/etc/loki/config/config.yaml
          - -limits.per-user-override-config=/etc/loki/config/overrides.yaml
          - -log.level=error
          - -s3.buckets=$(S3_BUCKETS)
          - -s3.region=$(S3_REGION)
          - -s3.access-key-id=$(AWS_ACCESS_KEY_ID)
          - -s3.secret-access-key=$(AWS_SECRET_ACCESS_KEY)
          - -distributor.replication-factor=${LOKI_REPLICATION_FACTOR}
          env:
          - name: S3_BUCKETS
            valueFrom:
              secretKeyRef:
                key: bucket
                name: ${LOKI_S3_SECRET}
          - name: S3_REGION
            valueFrom:
              secretKeyRef:
                key: aws_region
                name: ${LOKI_S3_SECRET}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${LOKI_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${LOKI_S3_SECRET}
          image: ${LOKI_IMAGE}:${LOKI_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /metrics
              port: 3100
              scheme: HTTP
            periodSeconds: 30
          name: observatorium-loki-distributor
          ports:
          - containerPort: 3100
            name: metrics
          - containerPort: 9095
            name: grpc
          - containerPort: 7946
            name: gossip-ring
          readinessProbe:
            httpGet:
              path: /ready
              port: 3100
              scheme: HTTP
            initialDelaySeconds: 15
            timeoutSeconds: 1
          resources:
            limits:
              cpu: ${LOKI_DISTRIBUTOR_CPU_LIMITS}
              memory: ${LOKI_DISTRIBUTOR_MEMORY_LIMITS}
            requests:
              cpu: ${LOKI_DISTRIBUTOR_CPU_REQUESTS}
              memory: ${LOKI_DISTRIBUTOR_MEMORY_REQUESTS}
          volumeMounts:
          - mountPath: /etc/loki/config/
            name: config
            readOnly: false
          - mountPath: /data
            name: storage
            readOnly: false
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.${JAEGER_COLLECTOR_NAMESPACE}.svc:14250
          - --reporter.type=grpc
          - --agent.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 5778
            name: configs
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 14271
            name: metrics
          readinessProbe:
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
            initialDelaySeconds: 1
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
        serviceAccountName: ${SERVICE_ACCOUNT_NAME}
        volumes:
        - configMap:
            name: observatorium-loki
          name: config
        - emptyDir: {}
          name: storage
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: distributor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${LOKI_IMAGE_TAG}
    name: observatorium-loki-distributor-grpc
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 9095
      targetPort: 9095
    selector:
      app.kubernetes.io/component: distributor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: distributor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${LOKI_IMAGE_TAG}
    name: observatorium-loki-distributor-http
  spec:
    ports:
    - name: metrics
      port: 3100
      targetPort: 3100
    selector:
      app.kubernetes.io/component: distributor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      prometheus: app-sre
    name: observatorium-loki-distributor
  spec:
    endpoints:
    - port: metrics
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        app.kubernetes.io/component: distributor
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: loki
        app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${LOKI_IMAGE_TAG}
    name: observatorium-loki-gossip-ring
  spec:
    clusterIP: None
    ports:
    - name: gossip
      port: 7946
      protocol: TCP
      targetPort: 7946
    selector:
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      loki.grafana.com/gossip: "true"
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: index-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${LOKI_IMAGE_TAG}
    name: observatorium-loki-index-gateway-grpc
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 9095
      targetPort: 9095
    selector:
      app.kubernetes.io/component: index-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: index-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${LOKI_IMAGE_TAG}
    name: observatorium-loki-index-gateway-http
  spec:
    ports:
    - name: metrics
      port: 3100
      targetPort: 3100
    selector:
      app.kubernetes.io/component: index-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      prometheus: app-sre
    name: observatorium-loki-index-gateway
  spec:
    endpoints:
    - port: metrics
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        app.kubernetes.io/component: index-gateway
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: loki
        app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: index-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${LOKI_IMAGE_TAG}
    name: observatorium-loki-index-gateway
  spec:
    replicas: ${{LOKI_INDEX_GATEWAY_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: index-gateway
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: loki
        app.kubernetes.io/part-of: observatorium
    serviceName: observatorium-loki-index-gateway-grpc
    template:
      metadata:
        labels:
          app.kubernetes.io/component: index-gateway
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: loki
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
      spec:
        containers:
        - args:
          - -target=index-gateway
          - -config.file=/etc/loki/config/config.yaml
          - -limits.per-user-override-config=/etc/loki/config/overrides.yaml
          - -log.level=error
          - -s3.buckets=$(S3_BUCKETS)
          - -s3.region=$(S3_REGION)
          - -s3.access-key-id=$(AWS_ACCESS_KEY_ID)
          - -s3.secret-access-key=$(AWS_SECRET_ACCESS_KEY)
          - -distributor.replication-factor=${LOKI_REPLICATION_FACTOR}
          env:
          - name: S3_BUCKETS
            valueFrom:
              secretKeyRef:
                key: bucket
                name: ${LOKI_S3_SECRET}
          - name: S3_REGION
            valueFrom:
              secretKeyRef:
                key: aws_region
                name: ${LOKI_S3_SECRET}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${LOKI_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${LOKI_S3_SECRET}
          image: ${LOKI_IMAGE}:${LOKI_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /metrics
              port: 3100
              scheme: HTTP
            periodSeconds: 30
          name: observatorium-loki-index-gateway
          ports:
          - containerPort: 3100
            name: metrics
          - containerPort: 9095
            name: grpc
          readinessProbe:
            httpGet:
              path: /ready
              port: 3100
              scheme: HTTP
            initialDelaySeconds: 15
            timeoutSeconds: 1
          resources:
            limits:
              cpu: ${LOKI_INDEX_GATEWAY_CPU_LIMITS}
              memory: ${LOKI_INDEX_GATEWAY_MEMORY_LIMITS}
            requests:
              cpu: ${LOKI_INDEX_GATEWAY_CPU_REQUESTS}
              memory: ${LOKI_INDEX_GATEWAY_MEMORY_REQUESTS}
          volumeMounts:
          - mountPath: /etc/loki/config/
            name: config
            readOnly: false
          - mountPath: /data
            name: storage
            readOnly: false
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.${JAEGER_COLLECTOR_NAMESPACE}.svc:14250
          - --reporter.type=grpc
          - --agent.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 5778
            name: configs
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 14271
            name: metrics
          readinessProbe:
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
            initialDelaySeconds: 1
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
        serviceAccountName: ${SERVICE_ACCOUNT_NAME}
        volumes:
        - configMap:
            name: observatorium-loki
          name: config
    volumeClaimTemplates:
    - metadata:
        labels:
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: loki
          app.kubernetes.io/part-of: observatorium
        name: storage
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${LOKI_PVC_REQUEST}
        storageClassName: ${STORAGE_CLASS}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: ingester
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${LOKI_IMAGE_TAG}
    name: observatorium-loki-ingester-grpc
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 9095
      targetPort: 9095
    selector:
      app.kubernetes.io/component: ingester
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: ingester
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${LOKI_IMAGE_TAG}
    name: observatorium-loki-ingester-http
  spec:
    ports:
    - name: metrics
      port: 3100
      targetPort: 3100
    selector:
      app.kubernetes.io/component: ingester
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      prometheus: app-sre
    name: observatorium-loki-ingester
  spec:
    endpoints:
    - port: metrics
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        app.kubernetes.io/component: ingester
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: loki
        app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: ingester
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${LOKI_IMAGE_TAG}
    name: observatorium-loki-ingester
  spec:
    replicas: ${{LOKI_INGESTER_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: ingester
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: loki
        app.kubernetes.io/part-of: observatorium
        loki.grafana.com/gossip: "true"
    serviceName: observatorium-loki-ingester-grpc
    template:
      metadata:
        labels:
          app.kubernetes.io/component: ingester
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: loki
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
          loki.grafana.com/gossip: "true"
      spec:
        containers:
        - args:
          - -target=ingester
          - -config.file=/etc/loki/config/config.yaml
          - -limits.per-user-override-config=/etc/loki/config/overrides.yaml
          - -log.level=error
          - -s3.buckets=$(S3_BUCKETS)
          - -s3.region=$(S3_REGION)
          - -s3.access-key-id=$(AWS_ACCESS_KEY_ID)
          - -s3.secret-access-key=$(AWS_SECRET_ACCESS_KEY)
          - -distributor.replication-factor=${LOKI_REPLICATION_FACTOR}
          - -ingester.wal-replay-memory-ceiling=${LOKI_INGESTER_WAL_REPLAY_MEMORY_CEILING}
          env:
          - name: S3_BUCKETS
            valueFrom:
              secretKeyRef:
                key: bucket
                name: ${LOKI_S3_SECRET}
          - name: S3_REGION
            valueFrom:
              secretKeyRef:
                key: aws_region
                name: ${LOKI_S3_SECRET}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${LOKI_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${LOKI_S3_SECRET}
          image: ${LOKI_IMAGE}:${LOKI_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /metrics
              port: 3100
              scheme: HTTP
            periodSeconds: 30
          name: observatorium-loki-ingester
          ports:
          - containerPort: 3100
            name: metrics
          - containerPort: 9095
            name: grpc
          - containerPort: 7946
            name: gossip-ring
          readinessProbe:
            httpGet:
              path: /ready
              port: 3100
              scheme: HTTP
            initialDelaySeconds: 15
            timeoutSeconds: 1
          resources:
            limits:
              cpu: ${LOKI_INGESTER_CPU_LIMITS}
              memory: ${LOKI_INGESTER_MEMORY_LIMITS}
            requests:
              cpu: ${LOKI_INGESTER_CPU_REQUESTS}
              memory: ${LOKI_INGESTER_MEMORY_REQUESTS}
          volumeMounts:
          - mountPath: /etc/loki/config/
            name: config
            readOnly: false
          - mountPath: /data
            name: storage
            readOnly: false
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.${JAEGER_COLLECTOR_NAMESPACE}.svc:14250
          - --reporter.type=grpc
          - --agent.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 5778
            name: configs
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 14271
            name: metrics
          readinessProbe:
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
            initialDelaySeconds: 1
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
        serviceAccountName: ${SERVICE_ACCOUNT_NAME}
        volumes:
        - configMap:
            name: observatorium-loki
          name: config
    volumeClaimTemplates:
    - metadata:
        labels:
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: loki
          app.kubernetes.io/part-of: observatorium
        name: storage
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${LOKI_INGESTER_PVC_REQUEST}
        storageClassName: ${STORAGE_CLASS}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/component: querier
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${LOKI_IMAGE_TAG}
    name: observatorium-loki-querier
  spec:
    replicas: ${{LOKI_QUERIER_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: querier
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: loki
        app.kubernetes.io/part-of: observatorium
        loki.grafana.com/gossip: "true"
    template:
      metadata:
        labels:
          app.kubernetes.io/component: querier
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: loki
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
          loki.grafana.com/gossip: "true"
      spec:
        containers:
        - args:
          - -target=querier
          - -config.file=/etc/loki/config/config.yaml
          - -limits.per-user-override-config=/etc/loki/config/overrides.yaml
          - -log.level=error
          - -s3.buckets=$(S3_BUCKETS)
          - -s3.region=$(S3_REGION)
          - -s3.access-key-id=$(AWS_ACCESS_KEY_ID)
          - -s3.secret-access-key=$(AWS_SECRET_ACCESS_KEY)
          - -distributor.replication-factor=${LOKI_REPLICATION_FACTOR}
          env:
          - name: S3_BUCKETS
            valueFrom:
              secretKeyRef:
                key: bucket
                name: ${LOKI_S3_SECRET}
          - name: S3_REGION
            valueFrom:
              secretKeyRef:
                key: aws_region
                name: ${LOKI_S3_SECRET}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${LOKI_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${LOKI_S3_SECRET}
          image: ${LOKI_IMAGE}:${LOKI_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /metrics
              port: 3100
              scheme: HTTP
            periodSeconds: 30
          name: observatorium-loki-querier
          ports:
          - containerPort: 3100
            name: metrics
          - containerPort: 9095
            name: grpc
          - containerPort: 7946
            name: gossip-ring
          readinessProbe:
            httpGet:
              path: /ready
              port: 3100
              scheme: HTTP
            initialDelaySeconds: 15
            timeoutSeconds: 1
          resources:
            limits:
              cpu: ${LOKI_QUERIER_CPU_LIMITS}
              memory: ${LOKI_QUERIER_MEMORY_LIMITS}
            requests:
              cpu: ${LOKI_QUERIER_CPU_REQUESTS}
              memory: ${LOKI_QUERIER_MEMORY_REQUESTS}
          volumeMounts:
          - mountPath: /etc/loki/config/
            name: config
            readOnly: false
          - mountPath: /data
            name: storage
            readOnly: false
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.${JAEGER_COLLECTOR_NAMESPACE}.svc:14250
          - --reporter.type=grpc
          - --agent.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 5778
            name: configs
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 14271
            name: metrics
          readinessProbe:
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
            initialDelaySeconds: 1
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
        serviceAccountName: ${SERVICE_ACCOUNT_NAME}
        volumes:
        - configMap:
            name: observatorium-loki
          name: config
        - emptyDir: {}
          name: storage
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: querier
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${LOKI_IMAGE_TAG}
    name: observatorium-loki-querier-grpc
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 9095
      targetPort: 9095
    selector:
      app.kubernetes.io/component: querier
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: querier
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${LOKI_IMAGE_TAG}
    name: observatorium-loki-querier-http
  spec:
    ports:
    - name: metrics
      port: 3100
      targetPort: 3100
    selector:
      app.kubernetes.io/component: querier
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      prometheus: app-sre
    name: observatorium-loki-querier
  spec:
    endpoints:
    - port: metrics
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        app.kubernetes.io/component: querier
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: loki
        app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/component: query-frontend
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${LOKI_IMAGE_TAG}
    name: observatorium-loki-query-frontend
  spec:
    replicas: ${{LOKI_QUERY_FRONTEND_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: query-frontend
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: loki
        app.kubernetes.io/part-of: observatorium
    template:
      metadata:
        labels:
          app.kubernetes.io/component: query-frontend
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: loki
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
      spec:
        containers:
        - args:
          - -target=query-frontend
          - -config.file=/etc/loki/config/config.yaml
          - -limits.per-user-override-config=/etc/loki/config/overrides.yaml
          - -log.level=error
          - -s3.buckets=$(S3_BUCKETS)
          - -s3.region=$(S3_REGION)
          - -s3.access-key-id=$(AWS_ACCESS_KEY_ID)
          - -s3.secret-access-key=$(AWS_SECRET_ACCESS_KEY)
          - -distributor.replication-factor=${LOKI_REPLICATION_FACTOR}
          env:
          - name: S3_BUCKETS
            valueFrom:
              secretKeyRef:
                key: bucket
                name: ${LOKI_S3_SECRET}
          - name: S3_REGION
            valueFrom:
              secretKeyRef:
                key: aws_region
                name: ${LOKI_S3_SECRET}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${LOKI_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${LOKI_S3_SECRET}
          image: ${LOKI_IMAGE}:${LOKI_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /metrics
              port: 3100
              scheme: HTTP
            periodSeconds: 30
          name: observatorium-loki-query-frontend
          ports:
          - containerPort: 3100
            name: metrics
          - containerPort: 9095
            name: grpc
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /metrics
              port: 3100
              scheme: HTTP
            periodSeconds: 30
          resources:
            limits:
              cpu: ${LOKI_QUERY_FRONTEND_CPU_LIMITS}
              memory: ${LOKI_QUERY_FRONTEND_MEMORY_LIMITS}
            requests:
              cpu: ${LOKI_QUERY_FRONTEND_CPU_REQUESTS}
              memory: ${LOKI_QUERY_FRONTEND_MEMORY_REQUESTS}
          volumeMounts:
          - mountPath: /etc/loki/config/
            name: config
            readOnly: false
          - mountPath: /data
            name: storage
            readOnly: false
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.${JAEGER_COLLECTOR_NAMESPACE}.svc:14250
          - --reporter.type=grpc
          - --agent.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 5778
            name: configs
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 14271
            name: metrics
          readinessProbe:
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
            initialDelaySeconds: 1
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
        serviceAccountName: ${SERVICE_ACCOUNT_NAME}
        volumes:
        - configMap:
            name: observatorium-loki
          name: config
        - emptyDir: {}
          name: storage
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: query-frontend
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${LOKI_IMAGE_TAG}
    name: observatorium-loki-query-frontend-grpc
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 9095
      targetPort: 9095
    selector:
      app.kubernetes.io/component: query-frontend
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: query-frontend
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${LOKI_IMAGE_TAG}
    name: observatorium-loki-query-frontend-http
  spec:
    ports:
    - name: metrics
      port: 3100
      targetPort: 3100
    selector:
      app.kubernetes.io/component: query-frontend
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      prometheus: app-sre
    name: observatorium-loki-query-frontend
  spec:
    endpoints:
    - port: metrics
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        app.kubernetes.io/component: query-frontend
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: loki
        app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/component: query-scheduler
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${LOKI_IMAGE_TAG}
    name: observatorium-loki-query-scheduler
  spec:
    replicas: ${{LOKI_QUERY_SCHEDULER_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: query-scheduler
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: loki
        app.kubernetes.io/part-of: observatorium
    template:
      metadata:
        labels:
          app.kubernetes.io/component: query-scheduler
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: loki
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
      spec:
        containers:
        - args:
          - -target=query-scheduler
          - -config.file=/etc/loki/config/config.yaml
          - -limits.per-user-override-config=/etc/loki/config/overrides.yaml
          - -log.level=error
          - -s3.buckets=$(S3_BUCKETS)
          - -s3.region=$(S3_REGION)
          - -s3.access-key-id=$(AWS_ACCESS_KEY_ID)
          - -s3.secret-access-key=$(AWS_SECRET_ACCESS_KEY)
          - -distributor.replication-factor=${LOKI_REPLICATION_FACTOR}
          env:
          - name: S3_BUCKETS
            valueFrom:
              secretKeyRef:
                key: bucket
                name: ${LOKI_S3_SECRET}
          - name: S3_REGION
            valueFrom:
              secretKeyRef:
                key: aws_region
                name: ${LOKI_S3_SECRET}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${LOKI_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${LOKI_S3_SECRET}
          image: ${LOKI_IMAGE}:${LOKI_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /metrics
              port: 3100
              scheme: HTTP
            periodSeconds: 30
          name: observatorium-loki-query-scheduler
          ports:
          - containerPort: 3100
            name: metrics
          - containerPort: 9095
            name: grpc
          readinessProbe:
            httpGet:
              path: /ready
              port: 3100
              scheme: HTTP
            initialDelaySeconds: 15
            timeoutSeconds: 1
          resources:
            limits:
              cpu: ${LOKI_QUERY_SCHEDULER_CPU_LIMITS}
              memory: ${LOKI_QUERY_SCHEDULER_MEMORY_LIMITS}
            requests:
              cpu: ${LOKI_QUERY_SCHEDULER_CPU_REQUESTS}
              memory: ${LOKI_QUERY_SCHEDULER_MEMORY_REQUESTS}
          volumeMounts:
          - mountPath: /etc/loki/config/
            name: config
            readOnly: false
          - mountPath: /data
            name: storage
            readOnly: false
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.${JAEGER_COLLECTOR_NAMESPACE}.svc:14250
          - --reporter.type=grpc
          - --agent.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 5778
            name: configs
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 14271
            name: metrics
          readinessProbe:
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
            initialDelaySeconds: 1
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
        serviceAccountName: ${SERVICE_ACCOUNT_NAME}
        volumes:
        - configMap:
            name: observatorium-loki
          name: config
        - emptyDir: {}
          name: storage
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: query-scheduler
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${LOKI_IMAGE_TAG}
    name: observatorium-loki-query-scheduler-grpc
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 9095
      targetPort: 9095
    selector:
      app.kubernetes.io/component: query-scheduler
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: query-scheduler
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${LOKI_IMAGE_TAG}
    name: observatorium-loki-query-scheduler-http
  spec:
    ports:
    - name: metrics
      port: 3100
      targetPort: 3100
    selector:
      app.kubernetes.io/component: query-scheduler
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      prometheus: app-sre
    name: observatorium-loki-query-scheduler
  spec:
    endpoints:
    - port: metrics
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        app.kubernetes.io/component: query-scheduler
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: loki
        app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: ruler
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${LOKI_IMAGE_TAG}
    name: observatorium-loki-ruler-grpc
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 9095
      targetPort: 9095
    selector:
      app.kubernetes.io/component: ruler
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: ruler
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${LOKI_IMAGE_TAG}
    name: observatorium-loki-ruler-http
  spec:
    ports:
    - name: metrics
      port: 3100
      targetPort: 3100
    selector:
      app.kubernetes.io/component: ruler
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      prometheus: app-sre
    name: observatorium-loki-ruler
  spec:
    endpoints:
    - port: metrics
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        app.kubernetes.io/component: ruler
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: loki
        app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: ruler
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${LOKI_IMAGE_TAG}
    name: observatorium-loki-ruler
  spec:
    replicas: ${{LOKI_RULER_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: ruler
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: loki
        app.kubernetes.io/part-of: observatorium
        loki.grafana.com/gossip: "true"
    serviceName: observatorium-loki-ruler-grpc
    template:
      metadata:
        labels:
          app.kubernetes.io/component: ruler
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: loki
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
          loki.grafana.com/gossip: "true"
      spec:
        containers:
        - args:
          - -target=ruler
          - -config.file=/etc/loki/config/config.yaml
          - -limits.per-user-override-config=/etc/loki/config/overrides.yaml
          - -log.level=error
          - -s3.buckets=$(S3_BUCKETS)
          - -s3.region=$(S3_REGION)
          - -s3.access-key-id=$(AWS_ACCESS_KEY_ID)
          - -s3.secret-access-key=$(AWS_SECRET_ACCESS_KEY)
          - -ruler.storage.s3.buckets=$(RULER_S3_BUCKETS)
          - -ruler.storage.s3.region=$(RULER_S3_REGION)
          - -ruler.storage.s3.access-key-id=$(RULER_AWS_ACCESS_KEY_ID)
          - -ruler.storage.s3.secret-access-key=$(RULER_AWS_SECRET_ACCESS_KEY)
          - -distributor.replication-factor=1
          - -ruler.external.url="${ALERTMANAGER_EXTERNAL_URL}"
          env:
          - name: S3_BUCKETS
            valueFrom:
              secretKeyRef:
                key: bucket
                name: ${LOKI_S3_SECRET}
          - name: S3_REGION
            valueFrom:
              secretKeyRef:
                key: aws_region
                name: ${LOKI_S3_SECRET}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${LOKI_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${LOKI_S3_SECRET}
          - name: RULER_S3_BUCKETS
            valueFrom:
              secretKeyRef:
                key: bucket
                name: ${RULES_OBJSTORE_S3_SECRET}
          - name: RULER_S3_REGION
            valueFrom:
              secretKeyRef:
                key: aws_region
                name: ${RULES_OBJSTORE_S3_SECRET}
          - name: RULER_AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${RULES_OBJSTORE_S3_SECRET}
          - name: RULER_AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${RULES_OBJSTORE_S3_SECRET}
          image: ${LOKI_IMAGE}:${LOKI_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /metrics
              port: 3100
              scheme: HTTP
            periodSeconds: 30
          name: observatorium-loki-ruler
          ports:
          - containerPort: 3100
            name: metrics
          - containerPort: 9095
            name: grpc
          - containerPort: 7946
            name: gossip-ring
          readinessProbe:
            httpGet:
              path: /ready
              port: 3100
              scheme: HTTP
            initialDelaySeconds: 15
            timeoutSeconds: 1
          resources:
            limits:
              cpu: ${LOKI_RULER_CPU_LIMITS}
              memory: ${LOKI_RULER_MEMORY_LIMITS}
            requests:
              cpu: ${LOKI_RULER_CPU_REQUESTS}
              memory: ${LOKI_RULER_MEMORY_REQUESTS}
          volumeMounts:
          - mountPath: /etc/loki/config/
            name: config
            readOnly: false
          - mountPath: /data
            name: storage
            readOnly: false
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.${JAEGER_COLLECTOR_NAMESPACE}.svc:14250
          - --reporter.type=grpc
          - --agent.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 5778
            name: configs
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 14271
            name: metrics
          readinessProbe:
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
            initialDelaySeconds: 1
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
        serviceAccountName: ${SERVICE_ACCOUNT_NAME}
        volumes:
        - configMap:
            name: observatorium-loki
          name: config
    volumeClaimTemplates:
    - metadata:
        labels:
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: loki
          app.kubernetes.io/part-of: observatorium
        name: storage
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${LOKI_RULER_PVC_REQUEST}
        storageClassName: ${STORAGE_CLASS}
- apiVersion: v1
  data: {}
  kind: ConfigMap
  metadata:
    labels:
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: loki
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${LOKI_IMAGE_TAG}
    name: observatorium-loki-rules
parameters:
- name: NAMESPACE
  value: observatorium-logs
- name: ALERTMANAGER_NAMESPACE
  value: observatorium-mst-stage
- name: ALERTMANAGER_EXTERNAL_URL
  value: https://observatorium-alertmanager-mst.api.stage.openshift.com
- name: RULES_OBJSTORE_S3_SECRET
  value: rules-objstore-stage-s3
- name: STORAGE_CLASS
  value: gp2
- name: LOKI_IMAGE_TAG
  value: 2.7.2
- name: LOKI_IMAGE
  value: docker.io/grafana/loki
- name: LOKI_S3_SECRET
  value: observatorium-mst-logs-stage-s3
- name: LOKI_COMPACTOR_CPU_REQUESTS
  value: 500m
- name: LOKI_COMPACTOR_CPU_LIMITS
  value: 1000m
- name: LOKI_COMPACTOR_MEMORY_REQUESTS
  value: 2Gi
- name: LOKI_COMPACTOR_MEMORY_LIMITS
  value: 4Gi
- name: LOKI_DISTRIBUTOR_REPLICAS
  value: "2"
- name: LOKI_DISTRIBUTOR_CPU_REQUESTS
  value: 500m
- name: LOKI_DISTRIBUTOR_CPU_LIMITS
  value: 1000m
- name: LOKI_DISTRIBUTOR_MEMORY_REQUESTS
  value: 500Mi
- name: LOKI_DISTRIBUTOR_MEMORY_LIMITS
  value: 1Gi
- name: LOKI_INGESTER_REPLICAS
  value: "2"
- name: LOKI_INGESTER_CPU_REQUESTS
  value: 1000m
- name: LOKI_INGESTER_CPU_LIMITS
  value: 2000m
- name: LOKI_INGESTER_MEMORY_REQUESTS
  value: 5Gi
- name: LOKI_INGESTER_MEMORY_LIMITS
  value: 10Gi
- name: LOKI_INDEX_GATEWAY_REPLICAS
  value: "2"
- name: LOKI_INDEX_GATEWAY_CPU_REQUESTS
  value: 500m
- name: LOKI_INDEX_GATEWAY_CPU_LIMITS
  value: 1000m
- name: LOKI_INDEX_GATEWAY_MEMORY_REQUESTS
  value: 2Gi
- name: LOKI_INDEX_GATEWAY_MEMORY_LIMITS
  value: 4Gi
- name: LOKI_QUERIER_REPLICAS
  value: "2"
- name: LOKI_QUERIER_CPU_REQUESTS
  value: 500m
- name: LOKI_QUERIER_CPU_LIMITS
  value: 500m
- name: LOKI_QUERIER_MEMORY_REQUESTS
  value: 600Mi
- name: LOKI_QUERIER_MEMORY_LIMITS
  value: 1200Mi
- name: LOKI_QUERY_SCHEDULER_REPLICAS
  value: "2"
- name: LOKI_QUERY_SCHEDULER_CPU_REQUESTS
  value: 1000m
- name: LOKI_QUERY_SCHEDULER_CPU_LIMITS
  value: 2000m
- name: LOKI_QUERY_SCHEDULER_MEMORY_REQUESTS
  value: 600Mi
- name: LOKI_QUERY_SCHEDULER_MEMORY_LIMITS
  value: 1200Mi
- name: LOKI_QUERY_FRONTEND_REPLICAS
  value: "2"
- name: LOKI_QUERY_FRONTEND_CPU_REQUESTS
  value: 500m
- name: LOKI_QUERY_FRONTEND_CPU_LIMITS
  value: 500m
- name: LOKI_QUERY_FRONTEND_MEMORY_REQUESTS
  value: 600Mi
- name: LOKI_QUERY_FRONTEND_MEMORY_LIMITS
  value: 1200Mi
- name: LOKI_RULER_REPLICAS
  value: "2"
- name: LOKI_RULER_CPU_REQUESTS
  value: 1000m
- name: LOKI_RULER_CPU_LIMITS
  value: 2000m
- name: LOKI_RULER_MEMORY_REQUESTS
  value: 4Gi
- name: LOKI_RULER_MEMORY_LIMITS
  value: 6Gi
- name: LOKI_REPLICATION_FACTOR
  value: "2"
- name: LOKI_QUERIER_MAX_CONCURRENCY
  value: "2"
- name: LOKI_INGESTER_WAL_REPLAY_MEMORY_CEILING
  value: 5GB
- name: LOKI_CHUNK_CACHE_REPLICAS
  value: "2"
- name: LOKI_CHUNK_CACHE_CPU_REQUESTS
  value: 500m
- name: LOKI_CHUNK_CACHE_CPU_LIMITS
  value: "3"
- name: LOKI_CHUNK_CACHE_MEMORY_REQUESTS
  value: 5016Mi
- name: LOKI_CHUNK_CACHE_MEMORY_LIMITS
  value: 6Gi
- name: LOKI_INDEX_QUERY_CACHE_REPLICAS
  value: "2"
- name: LOKI_INDEX_QUERY_CACHE_CPU_REQUESTS
  value: 500m
- name: LOKI_INDEX_QUERY_CACHE_CPU_LIMITS
  value: "3"
- name: LOKI_INDEX_QUERY_CACHE_MEMORY_REQUESTS
  value: 1329Mi
- name: LOKI_INDEX_QUERY_CACHE_MEMORY_LIMITS
  value: 1536Mi
- name: LOKI_RESULTS_CACHE_REPLICAS
  value: "2"
- name: LOKI_RESULTS_CACHE_CPU_REQUESTS
  value: 500m
- name: LOKI_RESULTS_CACHE_CPU_LIMITS
  value: "3"
- name: LOKI_RESULTS_CACHE_MEMORY_REQUESTS
  value: 1329Mi
- name: LOKI_RESULTS_CACHE_MEMORY_LIMITS
  value: 1536Mi
- name: LOKI_PVC_REQUEST
  value: 10Gi
- name: LOKI_INGESTER_PVC_REQUEST
  value: 150Gi
- name: LOKI_RULER_PVC_REQUEST
  value: 10Gi
- name: JAEGER_COLLECTOR_NAMESPACE
  value: observatorium
- name: JAEGER_AGENT_IMAGE
  value: jaegertracing/jaeger-agent
- name: JAEGER_AGENT_IMAGE_TAG
  value: 1.29.0
- name: JAEGER_PROXY_CPU_REQUEST
  value: 100m
- name: JAEGER_PROXY_MEMORY_REQUEST
  value: 100Mi
- name: JAEGER_PROXY_CPU_LIMITS
  value: 200m
- name: JAEGER_PROXY_MEMORY_LIMITS
  value: 200Mi
- name: MEMCACHED_IMAGE
  value: docker.io/memcached
- name: MEMCACHED_IMAGE_TAG
  value: 1.6.13-alpine
- name: MEMCACHED_EXPORTER_IMAGE
  value: docker.io/prom/memcached-exporter
- name: MEMCACHED_EXPORTER_IMAGE_TAG
  value: v0.6.0
- name: MEMCACHED_CPU_REQUEST
  value: 500m
- name: MEMCACHED_CPU_LIMIT
  value: "3"
- name: MEMCACHED_MEMORY_REQUEST
  value: 1329Mi
- name: MEMCACHED_MEMORY_LIMIT
  value: 1844Mi
- name: MEMCACHED_EXPORTER_CPU_REQUEST
  value: 50m
- name: MEMCACHED_EXPORTER_CPU_LIMIT
  value: 200m
- name: MEMCACHED_EXPORTER_MEMORY_REQUEST
  value: 50Mi
- name: MEMCACHED_EXPORTER_MEMORY_LIMIT
  value: 200Mi
- name: SERVICE_ACCOUNT_NAME
  value: default
