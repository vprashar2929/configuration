apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: dex
objects:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/component: identity-provider
      app.kubernetes.io/instance: dex
      app.kubernetes.io/name: dex
      app.kubernetes.io/version: ${IMAGE_TAG}
    name: dex
  spec:
    replicas: ${{REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: identity-provider
        app.kubernetes.io/instance: dex
        app.kubernetes.io/name: dex
        app.kubernetes.io/version: ${IMAGE_TAG}
    template:
      metadata:
        labels:
          app.kubernetes.io/component: identity-provider
          app.kubernetes.io/instance: dex
          app.kubernetes.io/name: dex
          app.kubernetes.io/version: ${IMAGE_TAG}
      spec:
        containers:
        - command:
          - /usr/local/bin/dex
          - serve
          - /etc/dex/cfg/config.yaml
          image: ${IMAGE}:${IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          name: dex
          ports:
          - containerPort: 5556
            name: http
          resources:
            limits:
              cpu: ${DEX_CPU_LIMITS}
              memory: ${DEX_MEMORY_LIMITS}
            requests:
              cpu: ${DEX_CPU_REQUEST}
              memory: ${DEX_MEMORY_REQUEST}
          volumeMounts:
          - mountPath: /etc/dex/cfg
            name: config
          - mountPath: /storage
            name: storage
            readOnly: false
        volumes:
        - name: config
          secret:
            items:
            - key: config.yaml
              path: config.yaml
            secretName: dex
        - name: storage
          persistentVolumeClaim:
            claimName: dex
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app.kubernetes.io/component: identity-provider
      app.kubernetes.io/instance: dex
      app.kubernetes.io/name: dex
      app.kubernetes.io/version: ${IMAGE_TAG}
    name: dex
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${DEX_STORAGE}
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app.kubernetes.io/component: identity-provider
      app.kubernetes.io/instance: dex
      app.kubernetes.io/name: dex
      app.kubernetes.io/version: ${IMAGE_TAG}
    name: dex
  stringData:
    config.yaml: |-
      "enablePasswordDB": true
      "issuer": "http://${NAMESPACE}.${NAMESPACE}.svc.cluster.local:5556/dex"
      "logger":
        "level": "debug"
      "oauth2":
        "passwordConnector": "local"
      "staticClients":
      - "id": "test"
        "name": "test"
        "secret": "ZXhhbXBsZS1hcHAtc2VjcmV0"
      "staticPasswords":
      - "email": "admin@example.com"
        "hash": "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"
        "userID": "08a8684b-db88-4b73-90a9-3cd1661f5466"
        "username": "admin"
      "storage":
        "config":
          "file": "/storage/dex.db"
        "type": "sqlite3"
      "web":
        "http": "0.0.0.0:5556"
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: identity-provider
      app.kubernetes.io/instance: dex
      app.kubernetes.io/name: dex
      app.kubernetes.io/version: ${IMAGE_TAG}
    name: dex
  spec:
    ports:
    - name: http
      port: 5556
      protocol: TCP
      targetPort: 5556
    selector:
      app.kubernetes.io/component: identity-provider
      app.kubernetes.io/instance: dex
      app.kubernetes.io/name: dex
      app.kubernetes.io/version: ${IMAGE_TAG}
    type: ClusterIP
parameters:
- name: NAMESPACE
  value: dex
- name: IMAGE
  value: dexidp/dex
- name: IMAGE_TAG
  value: v2.30.0
- name: REPLICAS
  value: "1"
- name: DEX_CPU_REQUEST
  value: 100m
- name: DEX_MEMORY_REQUEST
  value: 200Mi
- name: DEX_CPU_LIMITS
  value: 100m
- name: DEX_MEMORY_LIMITS
  value: 200Mi
- name: DEX_STORAGE
  value: 1Gi
